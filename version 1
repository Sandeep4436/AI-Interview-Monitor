import { useRef, useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import axios from 'axios';

export default function InterviewMonitor() {
  const videoRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const [stream, setStream] = useState(null);
  const [isRecording, setIsRecording] = useState(false);
  const [videoFile, setVideoFile] = useState(null);

  useEffect(() => {
    async function getVideo() {
      try {
        const userStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        setStream(userStream);
        if (videoRef.current) {
          videoRef.current.srcObject = userStream;
        }
      } catch (err) {
        console.error("Error accessing webcam: ", err);
      }
    }
    getVideo();
  }, []);

  const startRecording = () => {
    if (!stream) return;
    setIsRecording(true);
    const mediaRecorder = new MediaRecorder(stream);
    const chunks = [];
    mediaRecorder.ondataavailable = (event) => chunks.push(event.data);
    mediaRecorder.onstop = async () => {
      const blob = new Blob(chunks, { type: 'video/mp4' });
      setVideoFile(blob);
    };
    mediaRecorder.start();
    mediaRecorderRef.current = mediaRecorder;
  };

  const stopRecording = () => {
    setIsRecording(false);
    if (mediaRecorderRef.current) {
      mediaRecorderRef.current.stop();
    }
  };

  const uploadVideo = async () => {
    if (!videoFile) return;
    const formData = new FormData();
    formData.append('file', videoFile, 'interview.mp4');
    try {
      const response = await axios.post('/api/stop-recording', formData);
      console.log('Analysis result:', response.data);
    } catch (err) {
      console.error("Upload failed: ", err);
    }
  };

  return (
    <div className="flex flex-col items-center p-6 bg-gray-100 min-h-screen">
      <h1 className="text-2xl font-bold mb-4">AI Interview Monitor</h1>
      <video ref={videoRef} autoPlay playsInline className="rounded-lg border shadow-lg w-3/4" />
      <div className="mt-4">
        {isRecording ? (
          <Button onClick={stopRecording} className="bg-red-500 hover:bg-red-700">Stop Recording</Button>
        ) : (
          <Button onClick={startRecording} className="bg-green-500 hover:bg-green-700">Start Interview</Button>
        )}
      </div>
      {videoFile && <Button onClick={uploadVideo} className="mt-4 bg-blue-500 hover:bg-blue-700">Upload & Analyze</Button>}
    </div>
  );
}
